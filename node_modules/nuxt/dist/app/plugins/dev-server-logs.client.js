import { consola, createConsola } from "consola";
import { defineNuxtPlugin } from "../nuxt.js";
import { devLogs, devRootDir } from "#build/nuxt.config.mjs";
export default defineNuxtPlugin((nuxtApp) => {
  if (!import.meta.client || import.meta.test) {
    return;
  }
  if (devLogs !== "silent") {
    const logger = createConsola({
      formatOptions: {
        colors: true,
        date: true
      }
    });
    const hydrationLogs = /* @__PURE__ */ new Set();
    consola.wrapConsole();
    consola.addReporter({
      log(logObj) {
        try {
          hydrationLogs.add(JSON.stringify(logObj.args));
        } catch {
        }
      }
    });
    nuxtApp.hook("dev:ssr-logs", (logs) => {
      for (const log of logs) {
        if (!hydrationLogs.size || !hydrationLogs.has(JSON.stringify(log.args))) {
          logger.log(normalizeServerLog({ ...log }));
        }
      }
    });
    nuxtApp.hooks.hook("app:suspense:resolve", () => consola.restoreAll());
    nuxtApp.hooks.hookOnce("dev:ssr-logs", () => hydrationLogs.clear());
  }
  nuxtApp.hooks.hook("app:suspense:resolve", async () => {
    if (typeof window !== "undefined" && window.__NUXT_LOGS__) {
      await nuxtApp.hooks.callHook("dev:ssr-logs", window.__NUXT_LOGS__);
    }
  });
});
function normalizeFilenames(stack) {
  stack = stack?.split("\n")[0] || "";
  stack = stack.replace(`${devRootDir}/`, "");
  stack = stack.replace(/:\d+:\d+\)?$/, "");
  return stack;
}
function normalizeServerLog(log) {
  log.additional = normalizeFilenames(log.stack);
  log.tag = "ssr";
  delete log.stack;
  return log;
}
